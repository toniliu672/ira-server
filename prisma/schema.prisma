// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid()) @map("_id")
  username  String   @unique
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

enum Gender {
  MALE
  FEMALE
}

model Student {
  id             String         @id @default(uuid()) @map("_id")
  username       String         @unique
  email          String         @unique
  password       String
  fullName       String
  gender         Gender
  phone          String?
  address        String?
  activeStatus   Boolean        @default(true)
  deviceId       String?        
  lastLogin      DateTime?
  jawabanPg      JawabanPg[]    
  jawabanEssay   JawabanEssay[] 
  nilaiPg        Float?         
  nilaiEssay     Float?         
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("students")
}

model Materi {
  id                   String        @id @default(uuid()) @map("_id")
  judul                String        @unique
  tujuanPembelajaran   String[]     // Array tujuan pembelajaran
  capaianPembelajaran  String[]     // Array capaian pembelajaran 
  deskripsi            String?      // Optional deskripsi singkat
  thumbnailUrl         String?      // URL thumbnail (max 5MB)
  urutan               Int          // Urutan materi
  status               Boolean      @default(true)
  subMateri            SubMateri[]  
  videoMateri          VideoMateri[] 
  quiz                 Quiz[]        // Add this relation

  @@map("materi")
  @@index([judul, status])
}

model SubMateri {
  id          String   @id @default(uuid()) @map("_id")
  judul       String   
  konten      String   
  imageUrls   String[] 
  urutan      Int      
  status      Boolean  @default(true)
  materiId    String   
  materiRef   Materi   @relation(fields: [materiId], references: [id], onDelete: Cascade)

  @@map("sub_materi")
  @@index([materiId, status])
}

model VideoMateri {
  id          String   @id @default(uuid()) @map("_id")
  judul       String
  deskripsi   String?
  videoUrl    String   // URL video dari ImageKit (max 100MB)
  thumbnailUrl String? // URL thumbnail untuk video (max 5MB)
  durasi      Int     // Durasi dalam menit
  urutan      Int     // Urutan dalam materi
  status      Boolean @default(true)
  materiId    String  
  materiRef   Materi  @relation(fields: [materiId], references: [id], onDelete: Cascade)

  @@map("video_materi")
  @@index([materiId, status])
}

enum QuizType {
  MULTIPLE_CHOICE
  ESSAY
}

model Quiz {
  id          String       @id @default(uuid()) @map("_id")
  materiId    String      
  judul       String
  deskripsi   String?
  type        QuizType    
  status      Boolean     @default(true)
  soalPg      SoalPg[]    
  soalEssay   SoalEssay[] 
  materiRef   Materi      @relation(fields: [materiId], references: [id], onDelete: Cascade)

  @@map("quiz")
  @@index([materiId, status])
}

model SoalPg {
  id          String      @id @default(uuid()) @map("_id")
  quizId      String      
  quizRef     Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  pertanyaan  String      
  opsiJawaban String[]    
  kunciJawaban Int        
  status      Boolean     @default(true)
  jawabanPg   JawabanPg[] 

  @@map("soal_pg")
  @@index([quizId, status])
}

model SoalEssay {
  id           String        @id @default(uuid()) @map("_id")
  quizId       String       
  quizRef      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  pertanyaan   String       
  status       Boolean      @default(true)
  jawabanEssay JawabanEssay[] 

  @@map("soal_essay")
  @@index([quizId, status])
}

model JawabanPg {
  id          String    @id @default(uuid()) @map("_id")
  studentId   String    
  soalId      String    
  jawaban     Int       
  isCorrect   Boolean   
  nilai       Float     
  attemptCount Int      @default(1)  // Track jumlah percobaan
  latestAttempt Boolean @default(true)  // Marker untuk jawaban terbaru
  studentRef  Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  soalRef     SoalPg    @relation(fields: [soalId], references: [id], onDelete: Cascade)

  @@map("jawaban_pg")
  @@index([studentId, soalId, latestAttempt])  // Optimasi query
}

model JawabanEssay {
  id          String     @id @default(uuid()) @map("_id")
  studentId   String    
  soalId      String    
  jawaban     String    
  nilai       Float?    
  feedback    String?   
  attemptCount Int      @default(1)  // Track jumlah percobaan
  latestAttempt Boolean @default(true)  // Marker untuk jawaban terbaru
  studentRef  Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  soalRef     SoalEssay  @relation(fields: [soalId], references: [id], onDelete: Cascade)

  @@map("jawaban_essay")
  @@index([studentId, soalId, latestAttempt])  // Optimasi query
}