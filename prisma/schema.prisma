// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid()) @map("_id")
  username  String   @unique
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

enum Gender {
  MALE
  FEMALE
}

model Student {
  id             String         @id @default(uuid()) @map("_id")
  username       String         @unique
  email          String         @unique
  password       String
  fullName       String
  gender         Gender
  phone          String?
  address        String?
  activeStatus   Boolean        @default(true)
  deviceId       String?        // For mobile app authentication
  lastLogin      DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  refreshTokens  RefreshToken[]

  @@map("students")
}

model RefreshToken {
  id        String    @id @default(uuid()) @map("_id")
  token     String    @unique
  deviceId  String?   // Link to specific device
  studentId String
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  @@index([studentId])
  @@map("refresh_tokens")
}

model Materi {
  id                    String      @id @default(uuid()) @map("_id")
  judul                 String      
  tujuanPembelajaran   String[]    // Array tujuan pembelajaran
  capaianPembelajaran  String[]    // Array capaian pembelajaran 
  deskripsi            String?
  urutan               Int         // Untuk mengurutkan materi
  status               Boolean     @default(true)
  subMateri            SubMateri[]
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  createdBy            String      // Admin ID pembuat
  updatedBy            String?     // Admin ID pengubah terakhir

  @@map("materi")
  @@index([judul, status])
}

model SubMateri {
  id          String   @id @default(uuid()) @map("_id")
  judul       String   
  materi      String    // Bisa menyimpan rich text atau markdown
  urutan      Int       // Untuk mengurutkan sub-materi dalam materi
  status      Boolean   @default(true)
  materiId    String    // Referensi ke materi induk
  materiRef   Materi    @relation(fields: [materiId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String    // Admin ID pembuat
  updatedBy   String?   // Admin ID pengubah terakhir

  @@map("sub_materi")
  @@index([materiId, status])
}